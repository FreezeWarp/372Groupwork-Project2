@startuml
skinparam classAttributeIconSize 0
hide empty members

abstract class CoolerState [[java:CoolerState]] {
	#boolean lightOn
	+{abstract}void run()
	+{abstract}int getCoolerLossRate()
	+{abstract}boolean isLightOn()
	+{abstract}void handle(Object arg)
}

class CoolerContext [[java:CoolerContext]] {
}

CoolerState --> "1" CoolerContext : coolerContext
class Observable [[java:java.util.Observable]] {
}

Observable <|-- CoolerState
class Timer [[java:Timer]] {
	-Thread thread
	-{static}Timer instance
	-Timer()
	+{static}Timer instance()
	+void run()
}

class Observable [[java:java.util.Observable]] {
}

Observable <|-- Timer
interface Runnable [[java:java.lang.Runnable]] {
}

Runnable <|.. Timer
abstract class ObservableCoolingStrategy [[java:ObservableCoolingStrategy]] {
}

class Observable [[java:java.util.Observable]] {
}

Observable <|-- ObservableCoolingStrategy
interface CoolingStrategy [[java:CoolingStrategy]] {
}

CoolingStrategy <|.. ObservableCoolingStrategy
class CoolerDoorClosedIdleState [[java:CoolerDoorClosedIdleState]] {
	+CoolerDoorClosedIdleState(CoolerContext coolerContext)
	+void handle(Object arg)
	+void run()
}

class CoolerDoorClosedState [[java:CoolerDoorClosedState]] {
}

CoolerDoorClosedState <|-- CoolerDoorClosedIdleState
class NoKeyException [[java:NoKeyException]] {
	+NoKeyException(Object key)
}

class RuntimeException [[java:java.lang.RuntimeException]] {
}

RuntimeException <|-- NoKeyException
class ConfigurationMap [[java:ConfigurationMap]] {
	~Map<K,V> map
	+ConfigurationMap(K[] defaultKeys, V[] defaultValues)
	+V get(K key)
	+void put(K key, V value)
}

class CoolerDoorClosedState [[java:CoolerDoorClosedState]] {
	#boolean lightOn
	+int getCoolerLossRate()
	+void handle(Object arg)
	+boolean isLightOn()
	+void run()
}

class CoolerState [[java:CoolerState]] {
}

CoolerState <|-- CoolerDoorClosedState
class GUIDisplay [[java:GUIDisplay]] {
	~{static}RoomContext roomContext
	~{static}CoolerContext fridge
	~{static}CoolerContext freezer
	~{static}ConfigurationMap<String,Integer> config
	-{static}ConfigurationMap<String,Label> labels
	-{static}ConfigurationMap<String,Button> buttons
	-{static}ConfigurationMap<String,TextField> textfields
	+{static}void main(String[] args)
	+void start(Stage primaryStage)
	+{static}void alert(String text)
	+{static}void startSimulation()
}

class Application [[java:com.sun.glass.ui.Application]] {
}

Application <|-- GUIDisplay
class CoolerContext [[java:CoolerContext]] {
	-ObjectProperty<CoolerState> currentState
	-DoubleProperty coolerTemp
	-int compressorStartDiff
	-int desiredCoolerTemp
	-int coolerLossRateOpen
	-int coolerLossRateClose
	-int coolerCoolRate
	+CoolerContext(RoomContext roomContext)
	+CoolerContext(RoomContext roomContext, int initialTemp, int targetTemp, int compressorStartDiff, int coolRate, int lossRateOpen, int lossRateClosed)
	+void update(Observable observable, Object arg)
	+void processEvent(Object event)
	+void changeCurrentState(CoolerState nextState)
	+double getCoolerTemp()
	+void setCoolerTemp(double temp)
	+DoubleProperty coolerTempProperty()
	+int getDesiredCoolerTemp()
	+void setDesiredCoolerTemp(int temp)
	+int getCoolerLossRateOpen()
	+void setCoolerLossRateOpen(int rate)
	+int getCoolerLossRateClose()
	+void setCoolerLossRateClose(int rate)
	+int getCoolerCoolRate()
	+void setCoolerCoolRate(int rate)
	+int getCompressorStartDiff()
	+void setCompressorStartDiff(int compressorStartDiff)
	+RoomContext getRoomContext()
	+ObservableCoolingStrategy getCoolingStrategy()
	+CoolerState getCurrentState()
	+ObjectProperty<CoolerState> currentStateProperty()
	+CoolerDoorClosedIdleState getDoorClosedIdleState()
	+CoolerDoorClosedActiveState getDoorClosedActiveState()
	+CoolerDoorOpenedState getDoorOpenedState()
}

class RoomContext [[java:RoomContext]] {
}

CoolerContext --> "1" RoomContext : roomContext
class CoolerDoorClosedIdleState [[java:CoolerDoorClosedIdleState]] {
}

CoolerContext --> "1" CoolerDoorClosedIdleState : doorClosedIdleState
class CoolerDoorClosedActiveState [[java:CoolerDoorClosedActiveState]] {
}

CoolerContext --> "1" CoolerDoorClosedActiveState : doorClosedActiveState
class CoolerDoorOpenedState [[java:CoolerDoorOpenedState]] {
}

CoolerContext --> "1" CoolerDoorOpenedState : doorOpenedState
class ObservableCoolingStrategy [[java:ObservableCoolingStrategy]] {
}

CoolerContext --> "1" ObservableCoolingStrategy : coolingStrategy
interface Observer [[java:java.util.Observer]] {
}

Observer <|.. CoolerContext
interface CoolingStrategy [[java:CoolingStrategy]] {
	void processTimerTick()
	void startCooling()
	void stopCooling()
	boolean isCooling()
	BooleanProperty isCoolingProperty()
	void handle(Object arg)
}

class CoolerDoorClosedActiveState [[java:CoolerDoorClosedActiveState]] {
	+CoolerDoorClosedActiveState(CoolerContext coolerContext)
	+void handle(Object arg)
	+void run()
}

class CoolerDoorClosedState [[java:CoolerDoorClosedState]] {
}

CoolerDoorClosedState <|-- CoolerDoorClosedActiveState
class RoomContext [[java:RoomContext]] {
	-IntegerProperty roomTemp
	+RoomContext(int roomTemp)
	+int getRoomTemp()
	+void setRoomTemp(int temp)
	+IntegerProperty roomTempProperty()
}

class CoolerDoorOpenedState [[java:CoolerDoorOpenedState]] {
	+CoolerDoorOpenedState(CoolerContext coolerContext)
	+int getCoolerLossRate()
	+void handle(Object arg)
	+boolean isLightOn()
	+void run()
}

class CoolerState [[java:CoolerState]] {
}

CoolerState <|-- CoolerDoorOpenedState
class DefaultCoolingStrategy [[java:DefaultCoolingStrategy]] {
	#int coolTime
	#int lossTime
	-BooleanProperty isCooling
	+DefaultCoolingStrategy(CoolerContext coolerContext)
	+void handle(Object arg)
	+void processTimerTick()
	+void startCooling()
	+void stopCooling()
	+boolean isCooling()
	+BooleanProperty isCoolingProperty()
}

class CoolerContext [[java:CoolerContext]] {
}

DefaultCoolingStrategy --> "1" CoolerContext : coolerContext
class ObservableCoolingStrategy [[java:ObservableCoolingStrategy]] {
}

ObservableCoolingStrategy <|-- DefaultCoolingStrategy
@enduml