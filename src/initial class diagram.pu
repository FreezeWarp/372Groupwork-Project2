@startuml
skinparam classAttributeIconSize 0
hide empty members

abstract class CoolerState [[java:CoolerState]] {
	+{abstract}run()
	+{abstract}isLightOn(): boolean
	+{abstract}isCooling(): boolean
	+{abstract}getCoolerLossRate(): int
	+{abstract}handle(Object arg)
}

class CoolerContext [[java:CoolerContext]] {
}

interface Observable [[java:java.lang.Observable]] {
}

CoolerState --> "1" CoolerContext : coolerContext

Observable <|-- CoolerState
class Timer [[java:Timer]] {
	-thread: Thread
	-{static}instance: Timer
	-Timer()
	+{static}instance(): Timer
	+void run()
}

Observable <|-- Timer
interface Runnable [[java:java.lang.Runnable]] {
}

Runnable <|.. Timer
abstract class ObservableCoolingStrategy [[java:ObservableCoolingStrategy]] {
}

Observable <|-- ObservableCoolingStrategy
interface CoolingStrategy [[java:CoolingStrategy]] {
}

CoolingStrategy <|.. ObservableCoolingStrategy
class CoolerDoorClosedIdleState [[java:CoolerDoorClosedIdleState]] {
	+CoolerDoorClosedIdleState(coolerContext: CoolerContext)
}

class CoolerDoorClosedState [[java:CoolerDoorClosedState]] {
}

CoolerDoorClosedState <|-- CoolerDoorClosedIdleState
class NoKeyException [[java:NoKeyException]] {
	+NoKeyException(key: Object)
}

class RuntimeException [[java:java.lang.RuntimeException]] {
}

RuntimeException <|-- NoKeyException
class StrongMap [[java:StrongMap]] {
	-map: Map<K,V>
	+StrongMap(defaultKeys: K[], defaultValues: V[])
	+get(key: K): V
	+put(key: K, value: V)
}

class CoolerDoorClosedState [[java:CoolerDoorClosedState]] {
}

class CoolerState [[java:CoolerState]] {
}

CoolerState <|-- CoolerDoorClosedState
class GUIDisplay [[java:GUIDisplay]] {
	~{static}roomContext: RoomContext
	~{static}fridge: CoolerContext
	~{static}freezer: CoolerContext
	~{static}config: StrongMap<String,Integer>
	-{static}labels: StrongMap<String,Label>
	-{static}buttons: StrongMap<String,Button>
	-{static}textfields: StrongMap<String,TextField>
	+{static}main(args: String[])
	+start(primaryStage: Stage)
	+{static}alert(text: String)
	+{static}startSimulation()
}

class Application [[java:com.sun.glass.ui.Application]] {
}

Application <|-- GUIDisplay
class CoolerContext [[java:CoolerContext]] {
	-currentState: ObjectProperty<CoolerState>
	-coolerTemp: DoubleProperty
	-compressorStartDiff: int
	-desiredCoolerTemp: int
	-coolerLossRateOpen: int
	-coolerLossRateClose: int
	-coolerCoolRate: int
	+CoolerContext(roomContext: RoomContext)
	+CoolerContext(roomContext: RoomContext, initialTemp: int, targetTemp: int, compressorStartDiff: int, coolRate: int, lossRateOpen: int, lossRateClosed: int)
	+update(observable: Observable, arg: Object)
	+processEvent(event: Object)
	+changeCurrentState(nextState: CoolerState)
	+getCoolerTemp(): double
	+setCoolerTemp(temp: double)
	+coolerTempProperty(): DoubleProperty
	+getDesiredCoolerTemp(): int
	+setDesiredCoolerTemp(temp: int)
	+getCoolerLossRateOpen(): int
	+setCoolerLossRateOpen(rate: int)
	+getCoolerLossRateClose()
	+setCoolerLossRateClose(rate: int)
	+getCoolerCoolRate()
	+setCoolerCoolRate(rate: int)
	+getCompressorStartDiff()
	+setCompressorStartDiff(compressorStartDiff: int)
	+getRoomContext(): RoomContext
	+getCoolingStrategy(): ObservableCoolingStrategy
	+getCurrentState(): CoolerState
	+currentStateProperty(): ObjectProperty<CoolerState>
	+getDoorClosedIdleState(): CoolerDoorClosedIdleState
	+getDoorClosedActiveState(): CoolerDoorClosedActiveState
	+getDoorOpenedState(): CoolerDoorOpenedState
}

class RoomContext [[java:RoomContext]] {
}

CoolerContext --> "1" RoomContext : roomContext
class CoolerDoorClosedIdleState [[java:CoolerDoorClosedIdleState]] {
}

CoolerContext --> "1" CoolerDoorClosedIdleState : doorClosedIdleState
class CoolerDoorClosedActiveState [[java:CoolerDoorClosedActiveState]] {
}

CoolerContext --> "1" CoolerDoorClosedActiveState : doorClosedActiveState
class CoolerDoorOpenedState [[java:CoolerDoorOpenedState]] {
}

CoolerContext --> "1" CoolerDoorOpenedState : doorOpenedState
class ObservableCoolingStrategy [[java:ObservableCoolingStrategy]] {
}

CoolerContext --> "1" ObservableCoolingStrategy : coolingStrategy
interface Observer [[java:java.util.Observer]] {
}

Observer <|.. CoolerContext
interface CoolingStrategy [[java:CoolingStrategy]] {
	void handle(Object arg)
}

class CoolerDoorClosedActiveState [[java:CoolerDoorClosedActiveState]] {
	+CoolerDoorClosedActiveState(coolerContext: CoolerContext)
}

class CoolerDoorClosedState [[java:CoolerDoorClosedState]] {
}

CoolerDoorClosedState <|-- CoolerDoorClosedActiveState
class RoomContext [[java:RoomContext]] {
	-roomTemp: IntegerProperty
	+RoomContext(roomTemp: int)
	+getRoomTemp(): int
	+setRoomTemp(temp: int)
	+roomTempProperty(): IntegerProperty
}

class CoolerDoorOpenedState [[java:CoolerDoorOpenedState]] {
	+CoolerDoorOpenedState(CoolerContext coolerContext)
}

class CoolerState [[java:CoolerState]] {
}

CoolerState <|-- CoolerDoorOpenedState
class DefaultCoolingStrategy [[java:DefaultCoolingStrategy]] {
	-isCooling: boolean
	+DefaultCoolingStrategy(CoolerContext coolerContext)
	+handle(Object arg)
	+isCooling(): boolean
	-processTimerTick()
	-startCooling()
	-stopCooling()
}

DefaultCoolingStrategy --> "1" CoolerContext : coolerContext
class ObservableCoolingStrategy [[java:ObservableCoolingStrategy]] {
}

ObservableCoolingStrategy <|-- DefaultCoolingStrategy
@enduml